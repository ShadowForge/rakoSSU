{"version":3,"sources":["logo.svg","Game.js","PlayerHand.js","ComputerHand.js","MyPopUp.js","Deck.js","Discard.js","Choices.js","WinScreen.js","myGame.js","App.js","reportWebVitals.js","index.js"],"names":["Game","this","deck","discard","human","computer","drawnCard","turnStep","oldCompHand","computerMove","winner","discardTop","checkRack","console","log","computerPlay","cardStack","length","replaceDeck","c","pop","card","push","newCard","oldCard","hand","index","addCardToDiscard","array","i","j","Math","floor","random","getTopCard","who","y","document","getElementById","style","visibility","zIndex","shuffle","r","loc","findAndReplace","dealInitialHands","val","nextTurnStep","GameContext","React","createContext","PlayerHand","setU","u","setPop","game","useContext","className","id","map","onClick","TurnStep","alert","handleClick","Computerhand","backgroundColor","MyPopUp","position","left","top","bottom","right","Deck","Discard","paddingLeft","Choices","WinScreen","handleReset","width","height","border","borderRadius","MyGame","useState","instruction","setInstruction","started","setStarted","startGame","reset","handleInstructions","getPlayerStep","postion","fontSize","App","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c741a207.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\n\r\nexport default class Game {\r\n    constructor() {\r\n        this.deck = [];\r\n        this.discard = [];\r\n        this.human = [];\r\n        this.computer = [];\r\n        this.drawnCard = 0;\r\n        this.turnStep = 0;\r\n        this.oldCompHand = [];\r\n        this.computerMove = \"\"\r\n        this.winner = \"Computer\";\r\n        this.discardTop = 0;\r\n    }\r\n\r\n    nextTurnStep() {\r\n        this.turnStep += 1;\r\n        if (this.turnStep === 3) {\r\n            if (this.checkRack(this.human, \"Human\")) {\r\n                console.log(\"Winner\")\r\n            }\r\n            this.computerPlay();\r\n            if (this.checkRack(this.computer, \"Computer\")) {\r\n                console.log(\"You lose :P\")\r\n            }\r\n            this.turnStep = 0;\r\n        }\r\n    }\r\n    set TurnStep(val) {\r\n        this.nextTurnStep();\r\n    }\r\n\r\n    get TurnStep() {\r\n        return this.turnStep;\r\n    }\r\n\r\n    getTopCard(cardStack) {\r\n        if (this.deck.length === 0) {\r\n            this.replaceDeck();\r\n        }\r\n        let c = cardStack.pop();\r\n        this.drawnCard = c;\r\n        return c;\r\n    }\r\n\r\n    addCardToDiscard(card) {\r\n        this.discard.push(card)\r\n        this.discardTop = card;\r\n    }\r\n\r\n    findAndReplace(newCard, oldCard, hand, index) {\r\n        hand[index] = newCard;\r\n        this.addCardToDiscard(oldCard);\r\n    }\r\n\r\n    shuffle(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n\r\n    dealInitialHands(deck) {\r\n        for (let i = 0; i < 10; i++) {\r\n            this.human.push(this.getTopCard(deck));\r\n            this.computer.push(this.getTopCard(deck));\r\n        }\r\n        this.oldCompHand = [...this.computer];\r\n\r\n    }\r\n\r\n    checkRack(hand, who) {\r\n\r\n        for (let i = 1; i < hand.length; i++) {\r\n            if (hand[i] < hand[i-1]) {\r\n                return false;\r\n            }\r\n        }\r\n        let y = document.getElementById(\"WinScreen\");\r\n        this.winner = who;\r\n\r\n        if (y) {\r\n            y.style.visibility = \"visible\";\r\n            y.style.zIndex = 990;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    replaceDeck() {\r\n        this.deck = [...this.shuffle(this.discard)];\r\n        this.discard = []\r\n        this.addCardToDiscard(this.getTopCard(this.deck))\r\n    }\r\n\r\n    computerPlay() {\r\n\r\n        let r = Math.floor(Math.random() * 10) % 2;\r\n        console.log(r);\r\n        if (r === 0) {\r\n            let newCard = this.getTopCard(this.discard);\r\n            let loc = Math.floor((newCard - 1) / this.computer.length);\r\n            this.oldCompHand = [...this.computer];\r\n            this.findAndReplace(newCard, this.computer[loc], this.computer, loc);\r\n\r\n            this.computerMove = `Drew ${newCard} from discard and got rid of ${this.oldCompHand[loc]}.`;\r\n        } else {\r\n            let newCard = this.getTopCard(this.deck);\r\n            r = Math.floor(Math.random * 10) % 2;\r\n            if (r === 0) {\r\n                let loc = Math.floor((newCard - 1) / this.computer.length);\r\n                this.oldCompHand = [...this.computer];\r\n                this.findAndReplace(newCard, this.computer[loc], this.computer, loc);\r\n                this.computerMove = `Drew ${newCard} from deck and got rid of ${this.oldCompHand[loc]}.`;\r\n\r\n            } else {\r\n                this.addCardToDiscard(newCard);\r\n                this.computerMove = `Drew ${newCard} from deck and discarded it.`;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    startGame() {\r\n        for (let i = 1; i < 61; i++) {\r\n            this.deck.push(i);\r\n        }\r\n        this.shuffle(this.deck);\r\n        this.addCardToDiscard(this.getTopCard(this.deck));\r\n        this.dealInitialHands(this.deck);\r\n    }\r\n\r\n    reset() {\r\n        this.deck = [];\r\n        this.discard = [];\r\n        this.human = [];\r\n        this.computer = [];\r\n        this.drawnCard = 0;\r\n        this.turnStep = 0;\r\n        this.oldCompHand = [];\r\n        this.computerMove = \"\"\r\n        this.winner = \"Computer\";\r\n    }\r\n}\r\n\r\nexport const GameContext = React.createContext(null);\r\n","import React from 'react'\r\nimport { GameContext } from './Game';\r\n\r\nexport default function PlayerHand({setU, u, pop, setPop}) {\r\n\r\n    const game = React.useContext(GameContext);\r\n    const handleClick = (card, index) => {\r\n        if (game.TurnStep === 2) {\r\n            game.findAndReplace(game.drawnCard, card, game.human, index);\r\n            game.nextTurnStep();\r\n            setU(u+1);\r\n            setPop(false);\r\n        } else if (game.TurnStep === 1){\r\n            alert(\"Click keep or Discard.\")\r\n        } else if (game.TurnStep === 0) {\r\n            alert(\"Click on the Deck or Discard piles.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"player\" id=\"playerHand\">\r\n            {game.human.map((card, index) =>\r\n\r\n                <div key={\"p\"+index} onClick={() => handleClick(card, index)} className=\"card\">\r\n                    <h1>{card}</h1>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { GameContext } from './Game';\r\n\r\nexport default function Computerhand() {\r\n\r\n    const game = React.useContext(GameContext);\r\n \r\n    return (\r\n        <div className=\"computer\" id=\"computerHand\">\r\n        {game.computer.map((card, index) => \r\n            <div key={\"c\"+index} style={{backgroundColor: game.oldCompHand[index] !== game.computer[index] ? \"red\" : \"cornsilk\"}} className=\"card\">\r\n                <h1>{card}</h1>\r\n            </div>\r\n        )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { GameContext } from \"./Game\";\r\n\r\nexport default function MyPopUp({ pop, setPop }) {\r\n\r\n    const game = React.useContext(GameContext);\r\n    const handleKeep = () => {\r\n        if (game.TurnStep === 1) {\r\n            game.nextTurnStep();\r\n        } else {\r\n            alert(\"Click on a card in your hand to replace.\")\r\n        }\r\n    }\r\n\r\n    const handleDiscard = () => {\r\n        if (game.TurnStep === 1) {\r\n            game.addCardToDiscard(game.drawnCard);\r\n            game.nextTurnStep();\r\n            game.nextTurnStep();\r\n            setPop(false);\r\n        } else {\r\n            alert(\"You already chose keep. You need to choose a card from your hand.\")\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"popUp\" style={{ visibility: pop ? \"visible\" : \"hidden\" }}>\r\n                <p>Click on keep or discard. Then select one of your cards.</p>\r\n                <h3>Drawn Card:</h3>\r\n                <div style={{position: \"absolute\", left:\"35%\", top:\"30%\"}} className={\"card\"}>\r\n                    <h1>{game.drawnCard}</h1>\r\n                </div>\r\n                <button style={{position: \"absolute\", left:\"20%\", bottom:\"5%\"}} onClick={handleKeep}>Keep</button>\r\n                <button style={{position: \"absolute\", right:\"20%\", bottom:\"5%\"}} onClick={handleDiscard}>Discard</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\"\r\nimport { GameContext } from \"./Game\";\r\nimport MyPopUp from \"./MyPopUp\";\r\n\r\nexport default function Deck({ setPop, pop }) {\r\n    const game = React.useContext(GameContext);\r\n\r\n    const handleClick = () => {\r\n        if (game.TurnStep === 0) {\r\n            setPop(true);\r\n            game.getTopCard(game.deck);\r\n            game.nextTurnStep();\r\n        } else {\r\n            alert(\"You already made your choice.\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{\r\n                position: \"relative\",\r\n                zIndex: 1\r\n            }}>Deck:</h1>\r\n            <div onClick={handleClick} className=\"card\" >\r\n                <h1>?</h1>\r\n            </div>\r\n            <MyPopUp pop={pop} setPop={setPop} />\r\n\r\n        </>\r\n    );\r\n}","import { GameContext } from \"./Game\";\r\nimport React from 'react'\r\n\r\n\r\nexport default function Discard({u, setU}) {\r\n    const game = React.useContext(GameContext);\r\n\r\n    const handleClick = () => {\r\n        if (game.turnStep === 0) {\r\n            game.getTopCard(game.discard);\r\n            game.nextTurnStep();\r\n            game.nextTurnStep();\r\n            setU(u + 1)\r\n        } else {\r\n            alert(\"You already made your choice.\");\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h1 style={{\r\n                paddingLeft: \"50px\",\r\n                position: \"relative\",\r\n                zIndex: 1\r\n            }}>Discard:</h1>\r\n            <div onClick={() => handleClick()} className=\"card\">\r\n                <h1>{game.discardTop}</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}","import Deck from \"./Deck\";\r\nimport Discard from \"./Discard\";\r\n\r\nexport default function Choices({pop, setPop, setU, u}) {\r\n    return (\r\n        <div className=\"center\">\r\n            <Deck pop={pop} setPop={setPop}/>\r\n            <Discard setU={setU} u={u}/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { GameContext } from \"./Game\";\r\n\r\nexport default function WinScreen({handleReset}) {\r\n    const game = React.useContext(GameContext);\r\n\r\n    return (\r\n        <div id={\"WinScreen\"} style={{visibility: \"hidden\", width: \"300px\", height: \"300px\", backgroundColor:\"tan\", position: \"absolute\", zIndex:2, top: \"30%\", left:\"40%\", border: \"1px solid black\", borderRadius:\"25px\"}}>\r\n            <h1>{game.winner}</h1>\r\n            <h1>Wins!!!</h1>\r\n            <button onClick={handleReset}>Play again?</button>\r\n        </div>\r\n    )\r\n}","import { GameContext } from \"./Game\";\r\nimport PlayerHand from \"./PlayerHand\";\r\nimport React from 'react';\r\nimport ComputerHand from \"./ComputerHand\"\r\nimport Choices from \"./Choices\";\r\nimport WinScreen from \"./WinScreen\";\r\n\r\nexport default function MyGame() {\r\n    const game = React.useContext(GameContext);\r\n    const [u, setU] = React.useState(0);\r\n    const [pop, setPop] = React.useState(false);\r\n    const [instruction, setInstruction] = React.useState(false);\r\n    const [started, setStarted] = React.useState(false);\r\n\r\n\r\n    const handleClick = () => {\r\n        game.startGame();\r\n        setStarted(true);\r\n        setU(u + 1);\r\n    }\r\n\r\n    const handleReset = () => {\r\n        game.reset();\r\n        document.getElementById(\"WinScreen\").style.visibility = \"hidden\";\r\n        setU(u + 1);\r\n        setPop(false);\r\n        setStarted(false);\r\n        handleClick();\r\n    }\r\n\r\n    const handleInstructions = () => {\r\n        setInstruction(!instruction);\r\n    }\r\n\r\n    const getPlayerStep = () => {\r\n        switch (game.TurnStep) {\r\n            case 0:\r\n                return (\r\n                    <h4>Choose Deck or Discard</h4>\r\n                );\r\n            case 1:\r\n                return (\r\n                    <h4>Choose Keep or Discard</h4>\r\n                );\r\n            case 2:\r\n                return (\r\n                    <h4>Choose card from hand</h4>\r\n                );\r\n            default:\r\n                return (\r\n                    <h4>Computer turn</h4>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WinScreen handleReset={handleReset} />\r\n\r\n            {started && <div id={\"menu\"}>\r\n                <button onClick={handleInstructions}>Instructions</button>\r\n                <button onClick={started ? handleReset : handleClick}>{started ? \"Reset\" : \"Start\"}</button>\r\n            </div>\r\n            }\r\n            {started && <>\r\n                <div className=\"playerStep\">\r\n                    <h2>Player Instruction:</h2>\r\n                    {getPlayerStep()}\r\n                </div>\r\n                <div className={\"compMove\"}>\r\n                    <h3>Computer's move:</h3>\r\n                    <h4>{game.computerMove}</h4>\r\n                </div>\r\n                <ComputerHand />\r\n                <Choices pop={pop} setPop={setPop} u={u} setU={setU} />\r\n                <PlayerHand setU={setU} u={u} pop={pop} setPop={setPop} />\r\n            </>}\r\n            {!started && <h1 style={{postion: \"absolute\", top:\"30%\", fontSize:\"5em\"}}>Rack-O</h1>}\r\n            {!started && <button style={{ position: \"absolute\", top: \"40%\" }} onClick={handleClick}>Start</button>}\r\n            {!started && <button style={{ position: \"absolute\", top: \"50%\" }} onClick={handleInstructions}>Instructions</button>}\r\n\r\n            <div className={\"InstructionBox\"} style={{ visibility: instruction ? \"visible\" : \"hidden\" }}>\r\n                <h2>Instructions</h2>\r\n                <p>\r\n                    A Racko deck is composed of 60 cards, each numbered 1 to 60. The objective is to be the first player to arrange all of the cards in your rack from lowest to highest.\r\n                    </p>\r\n                <p>\r\n                    To start the game, shuffle the deck and both the user and the computer gets dealt 10 cards.\r\n                    As a player receives each card, he places it in the next available slot in his rack, without rearranging any of them.\r\n                    The goal of each hand is to create a sequence of numbers in ascending order, starting at slot 1.\r\n                </p>\r\n                <p>\r\n                    The top card of the deck is turned over to start the discard pile.\r\n                    A player takes a turn by taking the top card from either the discard or the deck pile, then discarding one from his rack and inserting the new card in its place.\r\n                    The top card in the discard pile is always \"visible\". And, therefore, the first choice the player has to make is whether to pick the top discard or not.\r\n                    Only if the player chooses to not pick the top discard, do they get to look at the top card in the deck. If the player draws a card from the deck, he may immediately discard it;\r\n                    if he takes the top discard, though, he must put it into his rack.\r\n                </p>\r\n                <p>\r\n                    The first player to get his 10 cards in ascending order calls ”Rack-O!” and wins the hand.\r\n                    <br />\r\n                    Note: Red card on the computer's hand is the last changed card.</p>\r\n                <button onClick={handleInstructions}>Close</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport Game, { GameContext } from './Game';\nimport MyGame from './myGame';\nconst game = new Game();\n\n\nfunction App() {\n\n  return (\n    <GameContext.Provider value={game}>\n      <div className=\"App\">\n      <MyGame />\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}